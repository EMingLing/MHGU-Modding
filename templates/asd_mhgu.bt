//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: Fexty
//   Version: 1
//   Purpose: 
//  Category: 
// File Mask: *.asd
//  ID Bytes: 00 00 18 42
//   History: 
//------------------------------------------------

#include "armor_name_mhgu.bt"

typedef struct {
    uint16 mSkillId;
    byte mPoints;
} Skill<read=Str("%u: %+d", this.mSkillId, this.mPoints)>;

typedef struct {
    uint32 mIndex;
    uint16 mSortId;
    byte mEnableParts[5]; // bool
    uint16 mModel;
    byte mMaleWearable; // bool
    byte mFemaelWearable; // bool
    byte mBladeWearable; // bool
    byte mGunnerWearable; // bool
    uint32 mPrice;
    byte mUniqueResist;
    ubyte mUniqueResistId;
    byte mFireRes;
    byte mWaterRes;
    byte mThunderRes;
    byte mIceRes;
    byte mDragonRes;
    Skill mHeadSkills[5];
    Skill mTorsoSkills[5];
    Skill mArmSkills[5];
    Skill mWaistSkills[5];
    Skill mLegSkills[5];
    ubyte mRarity;
    ubyte mMaxLv;
    ubyte mMaxLvForLimit;
    ubyte mDef;
    ubyte mDefLvUpTblIndex;
    ubyte mHeadSlotNum;
    ubyte mTorsoSlotNum;
    ubyte mArmSlotNum;
    ubyte mWaistSlotNum;
    ubyte mLegSlotNum;
    byte mSymbolCol;
    byte mUniqueBaseColorMale;
    ubyte mUniqueBaseColorIdMale;
    ubyte mBaseColMale;
    byte mUniqueBaseColorFemale;
    ubyte mUniqueBaseColorIdFemale;
    ubyte mBaseColFemale;
    ubyte mSeTypeMale;
    byte mUniqueSeTypeMale;
    ubyte mUniqueSeTypeIdMale;
    ubyte mSeTypeFemale;
    byte mUniqueSeTypeFemale;
    ubyte mUniqueSeTypeIdFemale;
    ubyte mGimmickDispType;
} Armor<read=Str("%s", getArmorName(this.mIndex))>;

float version;
int count;
Armor armor[count];

#define a armor[i]

local int i;
local int j;
Printf("[\n");
for (i = 0; i < count; i++) {
    Printf("{\"Id\":%d,\"Pieces\":[%d,%d,%d,%d,%d],\"HeadSkills\":[", a.mIndex, a.mEnableParts[0], a.mEnableParts[1], a.mEnableParts[2], a.mEnableParts[3], a.mEnableParts[4]);
    for (j = 0; j < 5; j++) {
        if (a.mHeadSkills[j].mSkillId == 0) break;
        if (j != 0) Printf(",");
        Printf("{\"Id\":%d,\"Points\":%d}", a.mHeadSkills[j].mSkillId, a.mHeadSkills[j].mPoints);
    }
    Printf("],\"TorsoSkills\":[");
    for (j = 0; j < 5; j++) {
        if (a.mTorsoSkills[j].mSkillId == 0) break;
        if (j != 0) Printf(",");
        Printf("{\"Id\":%d,\"Points\":%d}", a.mTorsoSkills[j].mSkillId, a.mTorsoSkills[j].mPoints);
    }
    Printf("],\"ArmSkills\":[");
    for (j = 0; j < 5; j++) {
        if (a.mArmSkills[j].mSkillId == 0) break;
        if (j != 0) Printf(",");
        Printf("{\"Id\":%d,\"Points\":%d}", a.mArmSkills[j].mSkillId, a.mArmSkills[j].mPoints);
    }
    Printf("],\"WaistSkills\":[");
    for (j = 0; j < 5; j++) {
        if (a.mWaistSkills[j].mSkillId == 0) break;
        if (j != 0) Printf(",");
        Printf("{\"Id\":%d,\"Points\":%d}", a.mWaistSkills[j].mSkillId, a.mWaistSkills[j].mPoints);
    }
    Printf("],\"LegSkills\":[");
    for (j = 0; j < 5; j++) {
        if (a.mLegSkills[j].mSkillId == 0) break;
        if (j != 0) Printf(",");
        Printf("{\"Id\":%d,\"Points\":%d}", a.mLegSkills[j].mSkillId, a.mLegSkills[j].mPoints);
    }
    Printf("],\"MaxLevel\":%d,\"Slots\":[%d,%d,%d,%d,%d],\"Blademaster\":%d,\"Gunner\":%d},\n",
        a.mMaxLv + a.mMaxLvForLimit, a.mHeadSlotNum, a.mTorsoSlotNum, a.mArmSlotNum, a.mWaistSlotNum, a.mLegSlotNum,
        a.mBladeWearable, a.mGunnerWearable);
}
Printf("]\n");